elemental
    -- Return all cities that have over 10000 inhabitants
    -- MATCH (n:City)
    -- WHERE n.inhabitants > 10000
    -- RETURN n

    -- Return all nodes that have a Railway with line C1
    -- MATCH (n)-[r:RAILWAY]->(o)
    -- WHERE r.line ="C1"
    -- RETURN n, r, o

intermediate
    -- Return the ratio between price and time spent on every public transport line.
        In the case of busline and boat there is no lane, hence the cost is represented as a whole.
        Order by type of public transport and by line name
    -- MATCH (n)-[r:RAILWAY|:BOAT|:BUSLINE]-(v)
    -- WHERE r.avg_ride_time > 19
    -- RETURN type(r), r.line, avg(r.price)/avg(r.avg_ride_time) as euros_per_minute_linewise
    -- LIMIT 25

    -- Return the 
    -- match (n)-[r1:RAILWAY]-(m)
    -- with r1.line as line
    -- match (a)-[r:RAILWAY]-(b)
    -- where r.line = line
    -- with avg(r.price) as average, line as line
    -- match (a)-[r:RAILWAY]-(b)
    -- where (r.price) > average AND r.line = line
    -- return r
    -- limit 25

advanced
    -- Return the shortest path (including each of the nodes) in between Gijón and Pola de Lena, along with the total trip time and the amount paid
    -- MATCH shortestPath((a)-[c:BUSLINE|:RAILWAY|:BOAT*]-(b))
    -- WHERE a.name='Pola de Lena' and b.name='Gijón'
    -- RETURN reduce (var=0,v1 in c | var+v1.avg_ride_time), reduce(var = 0, v1 in c | var + v1.price), extract(x in c|type(x)),extract(x in c|startnode(x)),extract(x in c|endnode(x))
    -- LIMIT 25

    -- From every possible path in between any node and Turón that goes through Langreo,
        return the departure node, the nodes in the path and the relationships traversed
    -- MATCH path = (n)-[r1:RAILWAY]-(l)-[r2*1..3]-(t:Valley)
    -- WHERE l.name='Langreo' AND n.name =~ "[aeiouAEIOU].*"
    -- RETURN n, nodes(path), relationships(path)
    -- LIMIT 25