elemental
    -- Return all cities that have over 10000 inhabitants ordered by number of inhabitants
    -- MATCH (n:City)
	-- WHERE n.inhabitants > 10000
	-- RETURN n.name
	-- ORDER BY n.inhabitants DESC

    -- Return all nodes that have a Railway with line C1
    -- MATCH (n)-[r:RAILWAY]->(o)
	-- WHERE r.line ="C1"
	-- RETURN n.name, r.avg_ride_time,r.price, o.name

intermediate
    -- Return the ratio between price and time spent on every public transport line.
        In the case of busline and boat there is no lane, hence the cost is represented as a whole.
        Order by type of public transport and by line name
    -- MATCH (n)-[r:RAILWAY|:BOAT|:BUSLINE]-(v)
    -- WHERE r.avg_ride_time > 19
    -- RETURN type(r), r.line, avg(r.price)/avg(r.avg_ride_time) as euros_per_minute_linewise
	-- ORDER BY euros_per_minute_linewise DESC
    -- LIMIT 25

    -- Return the paths between two adjacent nodes of the same lime whose price is higher than the average 
	   price of their line.
    -- MATCH (n)-[r1:RAILWAY]-(m)
    -- WITH r1.line as line
    -- MATCH (a)-[r:RAILWAY]-(b)
    -- WHERE r.line = line
    -- WITH avg(r.price) as average, line as line
    -- MATCH (a)-[r:RAILWAY]-(b)
    -- WHERE (r.price) > average AND r.line = line
    -- RETURN a.name,r.avg_ride_time,r.line,r.price,b.name,average
    -- LIMIT 25

advanced
    -- Return the shortest path (including each of the nodes) in between Gijón and Pola de Lena, along with the total trip time and the amount paid
    -- MATCH shortestPath((a)-[c:BUSLINE|:RAILWAY|:BOAT*]-(b))
    -- WHERE a.name='Pola de Lena' and b.name='Gijón'
    -- RETURN reduce (var=0,v1 in c | var+v1.avg_ride_time) as Total_Time, reduce(var = 0, v1 in c | var + v1.price) as Total_Price, c as Relationships,extract(x in c|startnode(x)) as InitialNodes,extract(x in c|endnode(x)) as EndNodes
    -- LIMIT 25

    -- From every possible path between any node that is adjacent to Langreo by train
		and a valley return the departure node, the nodes in the path and the relationships traversed.
		The first node must start with a vowel,
    -- MATCH path = (n)-[r1:RAILWAY]-(l)-[r2*1..3]-(t:Valley)
    -- WHERE l.name='Langreo' AND n.name =~ "[aeiouAEIOU].*"
    -- RETURN n, nodes(path), relationships(path)
    -- LIMIT 25